# -*- coding: utf-8 -*-
"""notebook75211232cc

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/notebook75211232cc-67f64ffd-1f32-44c5-94b1-64f5eaeb748e.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240324/auto/storage/goog4_request%26X-Goog-Date%3D20240324T091436Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Da8a262a0a0fee8c80b539274e2ea082ef10e6f03def6892f06099ed2a80320d36a8943f574acdb82de69572f7910557cba16a4cb46d908e46345ba8556b512c40ce11b3ed8445a893c9def4197a716b43d8c77eb9706801abcabc3fefa09d96dad4cfed972fc3f7f519ba4068105a838f7d8a5995a2a9798e3eeb6fc48e5221c1cd2f93c02d6aee5148f597b9091771d4f8ec149aa0fad05cd29419600fc4dd5e0bdd283dec2e9c8f6de7a54fae2b16f1808e4dd31ffced3ffbed5e75e2a6aef327a85f3f3073c8f88afb47e2755e73f03514c20effe1e42ac979bab5ec72a90736643075abeaee4e923d7f8b7c42b95240fd8bfcf38dd08b1dc0ea4964a1334
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES
# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'christmas:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F4659227%2F7927622%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240324%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240324T091436Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D0f7b9975e59b233a58a5079e5657b6c75bd8ba92903dd86f4074324dfc60b2265b85e79e4ce121751f4e530f3abced544757bc0322f1052fda6120d84de781040d035245a760eaf073258fb4dd90afd490939ed35085e41ad87e01956efd808c29254d525866b6f2703e406e5a19341402938bd43fcf0e3739560a8ac1a36278474df63951f4c6c1656c2ccdf2a4aa31f9f67f0963516b6cd5524e13f995d5f78b6ec4c30894053d764551064b38acc6bcedfb1d5ffc1fdbabc75932d40fad09b3f29add6c1a328fd6a556fff7c93cd3b9d66c0c3a88e9bb9c6cb8afc04f5a532b6790511d005e3cfbf395c63d18b2e5713ad37feba5986bcb60fd148103be5f'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

# %% [code]
import streamlit asst

# %% [code] {"execution":{"iopub.status.busy":"2024-03-24T07:04:29.276776Z","iopub.execute_input":"2024-03-24T07:04:29.277526Z","iopub.status.idle":"2024-03-24T07:04:44.352735Z","shell.execute_reply.started":"2024-03-24T07:04:29.277491Z","shell.execute_reply":"2024-03-24T07:04:44.351688Z"}}
!pip install diffusers -q

# %% [code] {"execution":{"iopub.status.busy":"2024-03-24T07:04:48.605830Z","iopub.execute_input":"2024-03-24T07:04:48.606198Z","iopub.status.idle":"2024-03-24T07:04:49.621352Z","shell.execute_reply.started":"2024-03-24T07:04:48.606165Z","shell.execute_reply":"2024-03-24T07:04:49.619887Z"}}
!nvidia-smi

# %% [code] {"execution":{"iopub.status.busy":"2024-03-24T07:04:54.501153Z","iopub.execute_input":"2024-03-24T07:04:54.501773Z","iopub.status.idle":"2024-03-24T07:05:44.994483Z","shell.execute_reply.started":"2024-03-24T07:04:54.501739Z","shell.execute_reply":"2024-03-24T07:05:44.993242Z"}}
# Imports
from PIL import Image
import torch
from torch import autocast
from diffusers import StableDiffusionPipeline
model_id = "prompthero/openjourney"
!pip install accelerate
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)

# %% [code] {"execution":{"iopub.status.busy":"2024-03-24T07:09:36.213153Z","iopub.execute_input":"2024-03-24T07:09:36.214029Z","iopub.status.idle":"2024-03-24T07:11:32.689730Z","shell.execute_reply.started":"2024-03-24T07:09:36.213996Z","shell.execute_reply":"2024-03-24T07:11:32.688742Z"}}
pipe = pipe.to("cuda")

# Prompt input for poster design
title_theme = input("Title/Theme: ")
color_vibe = input("Color Scheme/Vibe: ")
aim_objective = input("Aim/Objective of the Poster: ")
key_text = input("Key Text Elements (separated by commas): ")
design_pref = input("Design Preference or Design Vibe: ")
additional_notes = input("Additional Notes/Preferences: ")

# Formatting the prompt
poster_prompt = f"A {color_vibe} poster with a {design_pref} design style for {aim_objective}. "
poster_prompt += f"The title or theme is '{title_theme}'. "
poster_prompt += f"The key text elements are: {', '.join(key_text.split(','))}. "
poster_prompt += additional_notes

print("\nPoster Design Prompt:")
print(poster_prompt)

# Generate image using Stable Diffusion
with autocast("cuda"):
    output = pipe(poster_prompt, height=512, width=512)
    image = output["images"][0]  # Assuming "images" is the correct key
    image.save("poster_design_1.png")

# Save the generated image
image.save("poster_design_1.png")
print("Poster design generated and saved as 'poster_design_1.png'")

# %% [code] {"execution":{"iopub.status.busy":"2024-03-24T07:19:09.318334Z","iopub.execute_input":"2024-03-24T07:19:09.318766Z","iopub.status.idle":"2024-03-24T07:19:25.514876Z","shell.execute_reply.started":"2024-03-24T07:19:09.318734Z","shell.execute_reply":"2024-03-24T07:19:25.514092Z"}}
from PIL import Image
import torch
from torch import autocast
from diffusers import StableDiffusionPipeline

# Load Stable Diffusion model and pipeline
model_id = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)

# %% [code] {"execution":{"iopub.status.busy":"2024-03-24T07:21:25.011968Z","iopub.execute_input":"2024-03-24T07:21:25.012328Z","iopub.status.idle":"2024-03-24T07:27:34.518643Z","shell.execute_reply.started":"2024-03-24T07:21:25.012299Z","shell.execute_reply":"2024-03-24T07:27:34.517644Z"}}
pipe = pipe.to("cuda")

# Prompt input for poster design
title_theme = input("Title/Theme: ")
color_vibe = input("Color Scheme/Vibe: ")
aim_objective = input("Aim/Objective of the Poster: ")
key_text = input("Key Text Elements (separated by commas): ")
design_pref = input("Design Preference or Design Vibe: ")
additional_notes = input("Additional Notes/Preferences: ")

# Formatting the prompt
poster_prompt = f"A {color_vibe} poster with a {design_pref} design style for {aim_objective}. "
poster_prompt += f"The title or theme is '{title_theme}'. "
poster_prompt += f"The key text elements are: {', '.join(key_text.split(','))}. "
poster_prompt += additional_notes

print("\nPoster Design Prompt:")
print(poster_prompt)

# Generate image using Stable Diffusion
with autocast("cuda"):
    output = pipe(poster_prompt, height=512, width=512)
    image = output["images"][0]  # Assuming "images" is the correct key
    image.save("poster_design_2.png")

# Save the generated image
image.save("poster_design_2.png")
print("Poster design generated and saved as 'poster_design.png'")

# %% [code]
import streamlit as st

# Assuming Stable Diffusion pipeline is already defined as "pipe"

def generate_poster(title_theme, color_vibe, aim_objective, key_text, design_pref, additional_notes):
  """ Generates a poster design using Stable Diffusion pipeline"""
  poster_prompt = f"A {color_vibe} poster with a {design_pref} design style for {aim_objective}. "
  poster_prompt += f"The title or theme is '{title_theme}'. "
  poster_prompt += f"The key text elements are: {', '.join(key_text.split(','))}. "
  poster_prompt += additional_notes

  with st.spinner("Generating your poster design..."):
    with autocast("cuda"):
      output = pipe(poster_prompt, height=512, width=512)
      image = output["images"][0]  # Assuming "images" is the correct key
  return image

st.title("AI Poster Design Generator")

# User Input Fields
title_theme = st.text_input("Title/Theme:")
color_vibe = st.text_input("Color Scheme/Vibe:")
aim_objective = st.text_input("Aim/Objective of the Poster:")
key_text = st.text_input("Key Text Elements (separated by commas):")
design_pref = st.text_input("Design Preference or Design Vibe:")
additional_notes = st.text_area("Additional Notes/Preferences:")

# Generate Button
if st.button("Generate Poster"):
  generated_image = generate_poster(title_theme, color_vibe, aim_objective, key_text, design_pref, additional_notes)
  st.image(generated_image, caption="Your Generated Poster Design")

# Display Prompt (Optional)
if st.checkbox("Show Generated Prompt"):
  st.write("**Poster Design Prompt:**")
  st.code(poster_prompt, language="python")

# %% [code] {"execution":{"iopub.status.busy":"2024-03-24T07:34:33.461265Z","iopub.execute_input":"2024-03-24T07:34:33.461682Z","iopub.status.idle":"2024-03-24T07:34:47.077283Z","shell.execute_reply.started":"2024-03-24T07:34:33.461645Z","shell.execute_reply":"2024-03-24T07:34:47.075772Z"}}
# Install required libraries (if not already installed)
!pip install diffusers datasets transformers

# Import necessary libraries
from diffusers import StableDiffusionPipeline
from datasets import load_dataset

# Load a curated dataset relevant to your desired style
# (Replace "your_dataset_name" with the actual dataset name)
dataset = load_dataset("christmas")

# Explore the dataset (optional)
print(dataset.keys())  # View dataset keys (e.g., "train", "validation")
print(dataset["train"].features)  # View data features (e.g., "image", "caption")

# Load the Stable Diffusion pipeline (adjust model ID if needed)
pipe = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4")

# Function to generate an image using prompt and reference image (optional)
def generate_with_reference(prompt, reference_image_path=None):
  if reference_image_path:
    # Load reference image (adjust code based on image format)
    reference_image = Image.open(reference_image_path)
  else:
    reference_image = None

  # Generate image using the prompt and potentially a reference image
  image = pipe(prompt, reference_images=reference_image)["sample"][0]
  return image

# Example usage
prompt = "A vibrant landscape painting in the style of [artist name]"  # Replace with your desired prompt

# Optionally, incorporate a reference image for style guidance
reference_image_path = "path/to/your/reference_image.jpg"  # Replace with actual path (or None)

generated_image = generate_with_reference(prompt, reference_image_path)

# Save the generated image
generated_image.save("poster_design.png")
print("Image generation complete! Saved as 'poster_design.png'")


# %% [code]
# Install required libraries (if not already installed)
!pip install diffusers transformers

# Import libraries
from diffusers import StableDiffusionPipeline

# Define the text prompt for the poster
prompt = "A vibrant sci-fi cityscape at night, with neon signs and flying vehicles, perfect for a futuristic movie poster."

# Load the Stable Diffusion pipeline (may take some time)
pipe = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4")

# Generate the image (adjust num_inference_steps for quality vs. speed)
image = pipe(prompt, num_inference_steps=50).images[0]

# Save the image (replace "poster.png" with your desired filename)
image.save("poster.png")

print("Image generation complete! Check 'poster.png'")


# %% [code]
prompt = "Poster for U'Lectro National Level Project Display competition, with sci-tech bacground."

# Generate the image (adjust num_inference_steps for quality vs. speed)
image = pipe(prompt, num_inference_steps=3).images[0]

# Save the image (replace "poster.png" with your desired filename)
image.save("poster.png")

print("Image generation complete! Check 'poster.png'")

# %% [code]
def main():
    st.set_page_config("Text_2_poster")
    st.header("Create a poster with AI💁")

    user_question = st.text_input("Ask a Question from the PDF Files")


    with st.sidebar:
        st.title("Menu:")



    with st.sidebar:
        st.title("Menu:")
        pdf_docs = st.file_uploader(
            "Upload your PDF Files and Click on the Submit & Process Button",
            accept_multiple_files=True,
        )
        if st.button("Submit & Process"):
            with st.spinner("Processing..."):

                st.success("Done")

if __name__ == "__main__":
    main()



# %% [code]